---
# - name: Create VM to Proxmox
#   community.general.proxmox_kvm:
#     api_host: "{{ proxmox_ip }}"
#     node: "{{ proxmox_node }}"
#     api_user: "{{ proxmox_user }}"
#     api_token_id: "{{ proxmox_id }}"
#     api_token_secret: "{{ proxmox_secret }}"
#     validate_certs: false  # Отключить проверку сертификата Proxmox
#     clone: "{{ template_debian }}"
#     newid: "{{ newid | default(omit) }}"  # <-- Параметр пропустится, если newid не задан
#     full: true
#     description: "{{ description | default(omit) }}"  # <-- Параметр пропустится, если description не задан
#     name: "{{ item }}"
#     timeout: 300
#   loop: "{{ vm_name }}"
#   when: disk_type is defined

# - name: Update Cloud-init new VM
#   community.general.proxmox_kvm:
#     api_host: "{{ proxmox_ip }}"
#     node: "{{ proxmox_node }}"
#     api_user: "{{ proxmox_user }}"
#     api_token_id: "{{ proxmox_id }}"
#     api_token_secret: "{{ proxmox_secret }}"
#     validate_certs: false  # Отключить проверку сертификата Proxmox
#     name: "{{ item.0 }}"
#     cores: "{{ vm_core }}"
#     memory: "{{ vm_memory }}"
#     sshkeys: "{{ sshkey_ansible }}"
#     ciuser: "{{ ciuser | default(omit) }}"  # <-- Параметр пропустится, если ciuser не задан
#     cipassword: "{{ cipassword | default(omit) }}"  # <-- Параметр пропустится, если cipassword не задан
#     nameservers: 
#         - "{{ dns_ipa }}"
#         - "{{ dns_mikrotik }}"
#     ipconfig:
#       ipconfig0: 'ip={{ item.1 }}'
#     update: true
#     autostart: true
#   loop: "{{ vm_name | zip(vm_networks) | list }}"
#   when: disk_type is defined

# - name: Start VM (только если были изменения)
#   community.general.proxmox_kvm:
#     api_host: "{{ proxmox_ip }}"
#     node: "{{ proxmox_node }}"
#     api_user: "{{ proxmox_user }}"
#     api_token_id: "{{ proxmox_id }}"
#     api_token_secret: "{{ proxmox_secret }}"
#     name: "{{ item }}"
#     state: started
#   loop: "{{ vm_name }}"
#   when: disk_type is defined


- name: Create and configure VMs
  block:
    - name: Create VM from template
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_ip }}"
        node: "{{ proxmox_node }}"
        api_user: "{{ proxmox_user }}"
        api_token_id: "{{ proxmox_id }}"
        api_token_secret: "{{ proxmox_secret }}"
        validate_certs: false
        clone: "{{ template_debian }}"
        newid: "{{ item.0 | default(omit) }}"  # Первый элемент для VM ID
        full: true
        name: "{{ item.1 }}"  # Второй элемент - имя VM
        timeout: 300
      register: vm_create
      tags: create

    - name: Configure VM cloud-init
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_ip }}"
        node: "{{ proxmox_node }}"
        api_user: "{{ proxmox_user }}"
        api_token_id: "{{ proxmox_id }}"
        api_token_secret: "{{ proxmox_secret }}"
        validate_certs: false
        name: "{{ item.1 }}"
        cores: "{{ vm_core }}"
        memory: "{{ vm_memory }}"
        sshkeys: "{{ sshkey_ansible }}"
        ciuser: "{{ ciuser | default(omit) }}"
        cipassword: "{{ cipassword | default(omit) }}"
        nameservers: 
          - "{{ dns_ipa }}"
          - "{{ dns_mikrotik }}"
        ipconfig:
          ipconfig0: "ip={{ item.2 }}"  # Третий элемент - IP-адрес
        update: true
      when: vm_create is changed or vm_create is success
      tags: configure

    - name: Ensure VM is started
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_ip }}"
        node: "{{ proxmox_node }}"
        api_user: "{{ proxmox_user }}"
        api_token_id: "{{ proxmox_id }}"
        api_token_secret: "{{ proxmox_secret }}"
        name: "{{ item.1 }}"
        state: started
      tags: start
  loop: "{{ vm_id | zip(vm_names) | zip(vm_networks) | map('flatten') | list }}"
  when: disk_type is defined
  tags: vm_deploy
       